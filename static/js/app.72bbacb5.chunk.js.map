{"version":3,"sources":["Constants/Palette.ts","Buttons/Circle.tsx","Constants/tokens.ts","Constants/numbers.ts","Displays/Keypad.tsx","Displays/Current.tsx","Displays/History.tsx","Displays/Item.tsx","Displays/PrevList.tsx","Displays/NumberDisplay.tsx","Buttons/LongBoi.tsx","Constants/Variables.tsx","Displays/VarPad.tsx","Constants/calculator.ts","App.tsx","index.js"],"names":["White","Orange","primary","secondary","LightGray","DarkGray","windowWidth","Dimensions","get","width","windowHeight","height","cbw","Math","round","cbh","cbdim","min","dist","Display","styled","Text","props","color","Circ","TouchableHighlight","Circle","text","onTouch","onPress","underlayColor","activeOpacity","style","output","display","nargs","precedence","type","do","a","b","pow","DigitBuilder","n","this","value","Number","hasDecimal","String","includes","val","newValue","digits","0","1","2","3","4","5","6","7","8","9","View","Spacer","Row","Keypad","append","clear","equals","showVar","ScrollView","horizontal","showsHorizontalScrollIndicator","tokens","TextArea","Current","zIndex","History","history","Item","input","prevStyles","item","flex","StyleSheet","create","backgroundColor","paddingTop","marginVertical","marginHorizontal","flexDirection","justifyContent","fontSize","renderItem","PrevList","prev","scrollViewRef","useRef","ref","onContentSizeChange","current","scrollToEnd","animated","FlatList","data","NumberDisplay","LongBoi","useState","touched","setTouched","borderRadius","VariablesContext","createContext","Variables","vars","setVars","Provider","which","newObj","children","VarRow","VarDisplay","ButtonPartLmao","DisplayText","VarView","varName","store","retreive","mode","setMode","varVal","setVarVal","VarPad","back","currVal","currDisplay","useContext","change","Object","keys","map","idx","obj","key","alignSelf","addParenthesis","count","forEach","token","unshift","push","calculator","numStack","orderedTokens","outputQueue","operatorsStack","length","pop","op","rpn","console","log","i","Body","Main","registerRootComponent","setPrev","queue","setExpression","useEffect","reduce","acc","curr","appendQueue","newQ","lastElem","slice","evaluateQueue","nextVal","trunc"],"mappings":"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","file":"static/js/app.72bbacb5.chunk.js","sourcesContent":["export const White = \"#f2f2f7\";\r\n\r\nexport const Black = \"#1c1c1e\";\r\n\r\nexport const Orange = {\r\n    primary: \"#ff9500\",\r\n    secondary: \"#ffac30\"\r\n};\r\n\r\nexport const LightGray = {\r\n    primary: \"#aeaeb2\",\r\n    secondary: \"#d1d1d6\"\r\n};\r\n\r\nexport const DarkGray = {\r\n    primary: \"#48484a\",\r\n    secondary: \"#8e8e93\"\r\n};","import React from 'react';\r\nimport { Dimensions, TouchableHighlight, tyleSheet, Text, View } from 'react-native';\r\n\r\nimport styled from 'styled-components/native';\r\nimport { White } from '../Constants/Palette';\r\n\r\nlet windowWidth = Dimensions.get('window').width;\r\nconst windowHeight = Dimensions.get('window').height;\r\nexport let modifier = 1;\r\nif(windowWidth > windowHeight){\r\n\twindowWidth *= 0.45;\r\n\tmodifier = 0;\r\n}\r\nconst cbw = Math.round(windowWidth * .20);\r\nconst cbh = Math.round(windowHeight * .10);\r\nexport const cbdim = Math.min(cbw, cbh);\r\nexport const dist = Math.round((0.95* windowWidth - 4 * cbdim) * 0.20);\r\n\r\nconst Display = styled.Text`\r\n  color: ${(props: {color: string}) => props.color};\r\n  font-size: 32px;\r\n`\r\n\r\nconst Circ = styled.TouchableHighlight`\r\n  background-color: ${({color}: {color: string}) => color};\r\n  border-radius: 50%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\ntype CircleInput = {\r\n  color: {primary: string, secondary: string}\r\n  text: string,\r\n  onTouch: Function\r\n};\r\n\r\nexport default function Circle({ color, text, onTouch }: CircleInput) {\r\n  return (\r\n      <Circ \r\n        onPress={() => { onTouch(); }} \r\n        color={color.primary} \r\n        underlayColor={color.secondary}\r\n        activeOpacity={1}\r\n\tstyle={{\r\n\t\twidth: cbdim,\r\n\t\theight: cbdim,\r\n\t}}>\r\n          <Display color={White}>{text}</Display>\r\n      </Circ>\r\n  );\r\n}\r\n","import { TokenType } from \"./types\";\r\n\r\nconst output: { [key: string]: TokenType } =  {\r\n    \"+\": {\r\n        display: \"+\",\r\n        nargs: 2, \r\n        precedence: 20,\r\n        type: \"operator\",\r\n        do: (a: number, b: number) => { return a + b; }\r\n    },\r\n    \"-\": {\r\n        display: \"-\",\r\n        nargs: 2, \r\n        precedence: 20,\r\n        type: \"operator\",\r\n        do: (a: number, b: number) => { return a - b; }\r\n    },\r\n    \"*\": {\r\n        display: \"×\",\r\n        nargs: 2, \r\n        precedence: 10,\r\n        type: \"operator\",\r\n        do: (a: number, b: number) => { return a * b; }\r\n    },\r\n    \"/\": {\r\n        display: \"÷\",\r\n        nargs: 2, \r\n        precedence: 10,\r\n        type: \"operator\",\r\n        do: (a: number, b: number) => { \r\n            if (b === 0) {\r\n                throw 'Cannot divide by zero.';\r\n            }\r\n            return a / b;\r\n        }\r\n    },\r\n    \"(\": {\r\n        display: \"(\",\r\n        nargs: 0,\r\n        type: \"parenthesis\",\r\n        precedence: 0,\r\n        do: () => { return ; }\r\n    },\r\n    \")\": {\r\n        display: \")\",\r\n        nargs: 0, \r\n        type: \"parenthesis\",\r\n        precedence: 0,\r\n        do: () => { return ; }\r\n    },\r\n    \"\": {\r\n        display: \"\",\r\n        nargs: 0, \r\n        type: \"operator\",\r\n        precedence: 0,\r\n        do: () => { return ; }\r\n    },\r\n    \"^\": {\r\n    \tdisplay: \"^\",\r\n\tnargs: 2,\r\n\ttype: \"operator\",\r\n\tprecedence: 5,\r\n\tdo: (a: number, b: number) => { return Math.pow(a, b); }\r\n   },\r\n}\r\n\r\nexport default output;\r\n","import { types } from \"@babel/core\";\r\nimport { DigitType, Types } from \"./types\";\r\n\r\nconst digits: Record<number | \".\", DigitType> = {\r\n    0: {\r\n        type: \"digit\",\r\n        display: \"0\",\r\n        value: 0,\r\n    },\r\n    1: {\r\n        type: \"digit\",\r\n        display: \"1\",\r\n        value: 1\r\n    },\r\n    2: {\r\n        type: \"digit\",\r\n        display: \"2\",\r\n        value: 2\r\n    },\r\n    3: {\r\n        type: \"digit\",\r\n        display: \"3\",\r\n        value: 3\r\n    },\r\n    4: {\r\n        type: \"digit\",\r\n        display: \"4\",\r\n        value: 4\r\n    },\r\n    5: {\r\n        type: \"digit\",\r\n        display: \"5\",\r\n        value: 5\r\n    },\r\n    6: {\r\n        type: \"digit\",\r\n        display: \"6\",\r\n        value: 6\r\n    },\r\n    7: {\r\n        type: \"digit\",\r\n        display: \"7\",\r\n        value: 7\r\n    },\r\n    8: {\r\n        type: \"digit\",\r\n        display: \"8\",\r\n        value: 8\r\n    },\r\n    9: {\r\n        type: \"digit\",\r\n        display: \"9\",\r\n        value: 9\r\n    },\r\n    \".\": {\r\n        type: \"digit\",\r\n        display: '.',\r\n        value: \".\"\r\n    }\r\n};\r\n\r\nexport class DigitBuilder implements Types {\r\n    readonly value: number;\r\n    private hasDecimal;\r\n\r\n    readonly type = \"DigitBuilder\";\r\n    readonly display;\r\n\r\n    constructor(n: { display: string, value: string, type: \"DigitBuilder\" }) {\r\n        this.display = \"\" + n.value;\r\n        this.value = Number(n.value);\r\n\r\n        this.hasDecimal = String(n.value).includes(\".\");\r\n    }\r\n\r\n    append(val: DigitType) {\r\n        let newValue = this.display;\r\n\r\n        if (val.value === \".\") {\r\n            if (!this.hasDecimal) {\r\n                newValue += val.value;\r\n            }\r\n        }\r\n        else {\r\n            newValue += val.value;\r\n        }\r\n        return new DigitBuilder({ display: this.display, value: newValue, type:\"DigitBuilder\"})\r\n    }\r\n}\r\n\r\nexport default digits;\r\n\r\nexport const trunc = (val: number)=> {\r\n    return val ? Math.round(val * 1000) / 1000 + \"\" : \"0\";\r\n}\r\n\r\n/*\r\n,\r\n    \"e\": {\r\n        value: Math.E,\r\n        display: \"e\"\r\n    },\r\n    \"pi\": {\r\n        value: Math.PI,\r\n        display: \"pi\"\r\n    }, \r\n    \"a\": {\r\n        value: 0.8,\r\n        display: \"A\"\r\n    }, \r\n    \"b\": {\r\n        value: 0.8,\r\n        display: \"B\"\r\n    }, \r\n    \"c\": {\r\n        value: 0.8,\r\n        display: \"C\"\r\n    }, \r\n    \"d\": {\r\n        value: 0.8,\r\n        display: \"D\"\r\n    }\r\n*/","import React from 'react';\r\nimport { ScrollView, StyleSheet, Text, View } from 'react-native';\r\nimport styled from 'styled-components/native'\r\n\r\nimport { White, DarkGray, LightGray, Orange } from '../Constants/Palette';\r\nimport Circle from '../Buttons/Circle';\r\n\r\nimport tokens from \"../Constants/tokens\";\r\nimport digits from \"../Constants/numbers\";\r\n\r\nimport { cbdim, dist, modifier } from \"../Buttons/Circle\";\r\nimport { paddingPx } from \"../App\";\r\n\r\nconst Display = styled.View`\r\n    height: 70%;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n`;\r\n\r\nfunction Spacer(){\r\n\treturn (\r\n\t\t<View style={{width: (dist + 0.5)}}>\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nconst Row = styled.View`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n`;\r\n\r\nexport default function Keypad({ append, clear, equals, showVar }: {append: Function, clear: Function, equals: Function, showVar: Function}) {\r\n  return (\r\n    <Display>\r\n        <Row>\r\n\t\t\t<ScrollView horizontal={true} style={{height: cbdim + 1}}\r\n\t\t\tshowsHorizontalScrollIndicator={false}>\r\n\t\t\t{Spacer()}\r\n            <Circle color={LightGray} text=\"AC\" onTouch={() => {clear()}} />\r\n\t\t\t{Spacer()}\r\n            <Circle color={LightGray} text=\"V\" onTouch={() => {showVar()}} />\r\n\t\t\t{Spacer()}\r\n            <Circle color={LightGray} text=\".\" onTouch={() => {append(digits[\".\"])}} />\r\n\t\t\t{Spacer()}\r\n            <Circle color={Orange} text=\"÷\" onTouch={() => {append(tokens[\"/\"])}} />\r\n\t\t\t{Spacer()}\r\n            <Circle color={Orange} text=\"^\" onTouch={() => {append(tokens[\"^\"])}} />\r\n\t\t\t</ScrollView>\r\n        </Row>\r\n        <Row>\r\n            <Circle color={DarkGray} text=\"7\" onTouch={() => {append(digits[7])}} />\r\n            <Circle color={DarkGray} text=\"8\" onTouch={() => {append(digits[8])}} />\r\n            <Circle color={DarkGray} text=\"9\" onTouch={() => {append(digits[9])}} />\r\n            <Circle color={Orange} text=\"×\" onTouch={() => {append(tokens[\"*\"])}} />\r\n        </Row>\r\n        <Row>\r\n            <Circle color={DarkGray} text=\"4\" onTouch={() => {append(digits[4])}} />\r\n            <Circle color={DarkGray} text=\"5\" onTouch={() => {append(digits[5])}} />\r\n            <Circle color={DarkGray} text=\"6\" onTouch={() => {append(digits[6])}} />\r\n            <Circle color={Orange} text=\"–\" onTouch={() => {append(tokens[\"-\"])}} />\r\n        </Row>\r\n        <Row>\r\n            <Circle color={DarkGray} text=\"1\" onTouch={() => {append(digits[1])}} />\r\n            <Circle color={DarkGray} text=\"2\" onTouch={() => {append(digits[2])}} />\r\n            <Circle color={DarkGray} text=\"3\" onTouch={() => {append(digits[3])}} />\r\n            <Circle color={Orange} text=\"+\" onTouch={() => {append(tokens['+']);}} />\r\n        </Row>\r\n        <Row>\r\n            <Circle color={DarkGray} text=\"0\" onTouch={() => {append(digits[0])}} />\r\n            <Circle color={DarkGray} text=\"(\" onTouch={() => {append(tokens[\"(\"])}} />\r\n            <Circle color={DarkGray} text=\")\" onTouch={() => {append(tokens[\")\"])}} />\r\n            <Circle color={Orange} text=\"=\" onTouch={() => {equals()}} />\r\n        </Row>\r\n    </Display>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Text, View } from 'react-native';\r\n\r\nimport styled from 'styled-components/native';\r\nimport { White } from '../Constants/Palette';\r\n\r\nconst TextArea = styled.View`\r\n    width: 100%;\r\n    height: 50%;\r\n    \r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: flex-end;\r\n`;\r\n\r\nconst Display = styled.Text`\r\n  font-size: 64px;\r\n  color: ${White};\r\n`\r\n\r\nexport default function Current({ value }: {value: string}) {\r\n  return (\r\n    <TextArea>\r\n      <Display style={{zIndex: 10}}>{value}</Display>  \r\n    </TextArea>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\nimport styled from 'styled-components/native';\r\nimport { White } from '../Constants/Palette';\r\n\r\nconst Display = styled.Text`\r\n    width: 100%;\r\n    height: 25%;\r\n    font-size: 40px;\r\n    color: ${White}\r\n`;\r\n\r\nexport default function History({history}: {history: string}) {\r\n  return (\r\n    <Display>\r\n      {history}\r\n    </Display>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ScrollView, SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar } from 'react-native';\r\nimport { White, Black, LightGray } from '../Constants/Palette'\r\n\r\n\r\nexport default function Item ({ input, output}: {input:string, output: number})  {\r\n  return (\r\n    <View style={prevStyles.item}>\r\n      <Text style={prevStyles.input}>{input}</Text>\r\n      <View style={{flex: 1}}></View>\r\n      <Text style={prevStyles.output}>{output}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport const prevStyles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: Black,\r\n    //backgroundColor: \"#40b1ed\",\r\n    paddingTop: 5,\r\n    marginVertical: 5,\r\n    marginHorizontal: 0,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  input: {\r\n    fontSize: 24,\r\n    color: White\r\n  },\r\n  output: {\r\n    fontSize: 24,\r\n    color: White,\r\n   }\r\n});\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ScrollView, SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar } from 'react-native';\r\nimport { White, Black, LightGray } from '../Constants/Palette'\r\n\r\nimport Item from \"./Item\"\r\n\r\nconst renderItem = ({ item, output}) => (\r\n    <Item input={item.input} output={item.output}/>\r\n);\r\n\r\n\r\nexport default function PrevList({prev}) {\r\n    const scrollViewRef = useRef()\r\n\r\n    return (\r\n    <View style={{height: \"25%\"}}>\r\n        <ScrollView ref={scrollViewRef}\r\n        onContentSizeChange={()=> scrollViewRef.current.scrollToEnd({animated: true})}>\r\n        <FlatList\r\n            data={prev}\r\n            renderItem={renderItem}\r\n        />\r\n        </ScrollView>\r\n        </View>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\nimport styled from 'styled-components/native';\r\n\r\nimport Current from './Current';\r\nimport History from './History';\r\nimport PrevList from './PrevList';\r\n\r\nconst Display = styled.View`\r\n  padding: 0 5%;\r\n\r\n  height: 30%;\r\n`\r\n\r\nexport default function NumberDisplay({ history, val, prev } : {history: string, val:string, prev: string }) {\r\n  return (\r\n    <Display>\r\n        <PrevList prev={prev}/>\r\n        <History history={history}/>\r\n        <Current value={val}/>\r\n    </Display>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { TouchableHighlight, tyleSheet, Text, View } from 'react-native';\r\n\r\nimport styled from 'styled-components/native';\r\nimport { White } from '../Constants/Palette';\r\n\r\nimport { cbdim } from './Circle';\r\nconst Display = styled.Text`\r\n  color: ${(props: {color: string}) => props.color};\r\n  font-size: 32px;\r\n`\r\n\r\nconst Circ = styled.TouchableHighlight`\r\n  background-color: ${({color}: {color: string}) => color};\r\n  border-radius: 30px;\r\n\r\n  height: 75px;\r\n  width: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\ntype CircleInput = {\r\n  color: {primary: string, secondary: string}\r\n  text: string,\r\n  onTouch: Function\r\n};\r\n\r\nexport default function LongBoi({ color, text, onTouch }: CircleInput) {\r\n  const [touched, setTouched] = useState(false);\r\n\r\n  return (\r\n      <Circ \r\n        onPress={() => { \r\n          setTouched(!touched);\r\n          onTouch(); \r\n        }} \r\n        color={touched ? color.secondary : color.primary} \r\n        underlayColor={touched ? color.primary : color.secondary}\r\n        activeOpacity={1}\r\n\tstyle={{\r\n\t\theight: cbdim,\r\n\t\twidth: Math.round(2.67 * cbdim),\r\n\t\tborderRadius: Math.round(0.4 * cbdim),\r\n\t}}\r\n\t>\r\n          <Display color={White}>{text}</Display>\r\n      </Circ>\r\n  );\r\n}\r\n","import React, { useState, createContext } from \"react\";\r\nimport { DigitType } from \"./types\";\r\n\r\nexport const VariablesContext = createContext(null);\r\n\r\nexport const Variables = (props) => {\r\n\r\n    const [vars, setVars] = useState({\r\n        'A': {\r\n            type: 'number',\r\n            value: 0,\r\n            display: ''\r\n        },\r\n        'B': {\r\n            type: 'number',\r\n            value: 0,\r\n            display: ''\r\n        },\r\n        'C': {\r\n            type: 'number',\r\n            value: 0,\r\n            display: ''\r\n        },\r\n        'D': {\r\n            type: 'number',\r\n            value: 0,\r\n            display: ''\r\n        }\r\n    });\r\n\r\n    const change = (which: string, newObj: {type: 'number', value: number, display: string}) => {\r\n        setVars({...vars, [which]: newObj})\r\n    }\r\n\r\n    return <VariablesContext.Provider value={[vars, change]}>\r\n        {props.children}\r\n    </VariablesContext.Provider>\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { ScrollView, StyleSheet, Text, View } from 'react-native';\r\nimport styled from 'styled-components/native'\r\n\r\n\r\nimport { White, DarkGray, LightGray, Orange } from '../Constants/Palette';\r\nimport Circle from '../Buttons/Circle';\r\nimport LongBoi from '../Buttons/LongBoi';\r\n\r\nimport { VariablesContext } from \"../Constants/Variables\"\r\n\r\nimport { trunc } from '../Constants/numbers';\r\nimport { cbdim } from '../Buttons/Circle';\r\n\r\nconst VarRow = styled.View`\r\n\tflex-grow: 1;\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tjustify-content: flex-end;\r\n\talign-items: flex-end;\r\n`;\r\n\r\nconst VarDisplay = styled.View`\r\n\twidth: 60%;\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n\talign-items: flex-end;\r\n\r\n\tborderBottomColor: ${White};\r\n\tborderBottomWidth: 3px;\r\n\tborder-style: solid;\r\n`;\r\n\r\nconst ButtonPartLmao = styled.View`\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\twidth: 25%;\r\n`;\r\n\r\nconst DisplayText = styled.Text`\r\n\tfont-size: 50px;\r\n\tcolor: ${White};\r\n`;\r\n\r\nconst Display = styled.View`\r\n\tdisplay: flex;\r\n    flex: 1;\r\n\theight: 70%;\r\n`;\r\n\r\nexport function VarView({varName, store, retreive, mode, display, setMode}: {varName: string, store: Function, retreive: Function, mode:string, display: string, setMode:Function}){\r\n\tconst [varVal, setVarVal] = useState(display);\r\n\r\n\treturn (\r\n\t\t<Display>\r\n\t\t\t<VarRow>\r\n\t\t\t\t<VarDisplay>\r\n\t\t\t\t\t<DisplayText>{varVal}</DisplayText>\r\n\t\t\t\t</VarDisplay>\r\n\t\t\t\t<ButtonPartLmao>\r\n\t\t\t\t\t<Circle color={LightGray} text={varName} onTouch={() => {\r\n\t\t\t\t\t\tif (mode === \"store\") {\r\n\t\t\t\t\t\t\tsetVarVal(store());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (mode === \"retreive\" && varVal) {\r\n\t\t\t\t\t\t\tretreive();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetMode(\"retreive\");\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t</ButtonPartLmao>\r\n\t\t\t</VarRow>\r\n\t\t</Display>\r\n);}\r\n\r\nexport default function VarPad({append, back, currVal, currDisplay}: {append: Function, back: Function, currVal: number, currDisplay: string}){\r\n\tconst [mode, setMode] = useState(\"retreive\");\r\n\tconst [vars, change] = useContext(VariablesContext)\r\n\r\n\treturn (\r\n\t\t<Display>\r\n\t\t\t{\r\n\t\t\t\tObject.keys(vars).map((value, idx) => {\r\n\t\t\t\t\tconst obj = vars[value];\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<VarView\r\n\t\t\t\t\t\t\tvarName={value}\r\n\t\t\t\t\t\t\tdisplay={obj.display}\r\n\t\t\t\t\t\t\tretreive={() => append({ type: \"variable\", which: value, value: obj.value, display: value })}\r\n\t\t\t\t\t\t\tmode={mode}\r\n\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\tsetMode={setMode}\r\n\t\t\t\t\t\t\tstore={() => {\r\n\t\t\t\t\t\t\t\tchange(value, {type: \"number\", value: currVal, display: currDisplay})\r\n\t\t\t\t\t\t\t\treturn currDisplay;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t<VarRow style={{flex: 1}}>\r\n\t\t\t\t<View style={{width: \"30%\"}} />\r\n\t\t\t\t<ButtonPartLmao style={{justifyContent: \"flex-end\"}}>\r\n\t\t\t\t\t<LongBoi color={Orange} text=\"Save\" onTouch={() => { mode === \"store\" ? setMode(\"retreive\") : setMode(\"store\") }}\r\n\t\t\t\t\t\tstyle={{alignSelf: \"flex-end\"}}/>\r\n\t\t\t\t</ButtonPartLmao>\r\n\t\t\t\t<ButtonPartLmao>\r\n\t\t\t\t\t<Circle color={Orange} text=\"←\" onTouch={() => {back();}}/>\r\n\t\t\t\t</ButtonPartLmao>\r\n\t  \t\t</VarRow>\t\r\n\t\t</Display>\r\n\t)\r\n;}\r\n","import { Types } from \"./types\";\r\n\r\nconst rpn = (tokens: Array<Types>) => {\r\n    let outputQueue = [];\r\n    let operatorsStack = [];\r\n\r\n    tokens.forEach(token => {\r\n        if (token.type === \"variable\" || token.type === \"DigitBuilder\") {\r\n            outputQueue.push(token);\r\n        }\r\n        else if (token.display === \"(\") {\r\n            operatorsStack.push('(');\r\n        }\r\n        else if (token.display === \")\") {\r\n            while (operatorsStack.length && operatorsStack[operatorsStack.length - 1] !== \"(\") {\r\n                outputQueue.push(operatorsStack.pop())\r\n            }\r\n            operatorsStack.pop();\r\n        }\r\n        else {\r\n            while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1].precedence <= token.precedence) {\r\n                outputQueue.push(operatorsStack.pop())\r\n            }\r\n            operatorsStack.push(token);\r\n        }\r\n    });\r\n\r\n    while (operatorsStack.length > 0) {\r\n        const op = operatorsStack.pop()\r\n\r\n        if (op !== \")\" && op !== \"(\") {\r\n            outputQueue.push(op);\r\n        }\r\n    }\r\n\r\n    return outputQueue;\r\n}\r\n\r\nexport const addParenthesis = (tokens: Array<Types>) => {\r\n    let count = 0;\r\n\r\n    tokens.forEach((token) => {\r\n        if (token.type === \"parenthesis\") {\r\n            count += (token.display === \")\" ? 1 : 0);\r\n            count -= (token.display === \"(\" ? 1 : 0);\r\n        }\r\n    })\r\n\r\n    while (count > 0) {\r\n        tokens.unshift({ type: \"parenthesis\", display: \"(\", precedence: 0 });\r\n        --count;\r\n    }\r\n\r\n    while (count < 0) {\r\n        tokens.push({ type: \"parenthesis\", display: \")\", precedence: 0 })\r\n        ++count;\r\n    }\r\n    \r\n    return tokens;\r\n}\r\n\r\nconst calculator = (tokens: Array<Types>) => {\r\n\r\n    const numStack = [];\r\n\r\n    const orderedTokens = rpn(tokens)\r\n    \r\n    console.log(orderedTokens)\r\n\r\n    orderedTokens.forEach((token) => {\r\n        if (token.type === \"operator\") {\r\n            let input: Array<number> = [];\r\n            for (let i = 0; i < token.nargs; ++i) {\r\n                input.unshift(numStack.pop());\r\n            }\r\n            console.log(input);\r\n            numStack.push(token.do(...input));\r\n        }\r\n        else {\r\n            numStack.push(token.value);\r\n        }\r\n    })\r\n    console.log(numStack);\r\n    return numStack.pop();\r\n}\r\n\r\nexport default calculator;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ScrollView, SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar, Dimensions } from 'react-native';\r\n\r\nimport Keypad from './Displays/Keypad';\r\nimport NumberDisplay from './Displays/NumberDisplay';\r\nimport Circle from './Buttons/Circle';\r\n\r\nimport styled from 'styled-components/native';\r\n\r\nimport { White, Black, LightGray } from './Constants/Palette'\r\nimport VarPad from './Displays/VarPad';\r\nimport { VarView } from './Displays/VarPad';\r\n\r\nimport { Types, TokenType, DigitType } from \"./Constants/types\"\r\nimport { DigitBuilder, trunc } from \"./Constants/numbers\"\r\nimport output from './Constants/tokens';\r\nimport { Variables } from './Constants/Variables';\r\n\r\nimport calculator, {addParenthesis} from \"./Constants/calculator\";\r\n\r\nimport Current from './Displays/Current';\r\nimport History from './Displays/History';\r\n\r\nimport { Item } from './Displays/Item';\r\n\r\nconst windowWidth = Dimensions.get('window').width;\r\nconst windowHeight = Dimensions.get('window').height;\r\n\r\nconst Body = styled.View`\r\n  height: 100%;\r\n  background-color: ${Black};\r\n  padding: 2.5%;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Main = styled.View`\r\n  width: ${windowWidth > windowHeight ? 45 : 100}%;\r\n  height: 100%;\r\n`\r\nexport const paddingPx = windowWidth * 0.025\r\n\r\ntype stored = {\r\nqueue: Array<Types>,\r\n\t\t\t history: string,\r\n\t\t\t val: string\r\n}\r\n\r\nexport default function App() {\r\n  const [mode, setMode] = useState(\"num\");\r\n  const [prev, setPrev] = useState([{}]);\r\n\r\n  const defaultState: stored = { queue: [], history: \"\", val: \"\"};\r\n  const [{ queue, history, val }, setExpression] = useState(defaultState);\r\n\r\n\r\n  useEffect(() => {\r\n    const output = queue.reduce((acc, curr) => acc + curr.display, \"\");\r\n    setExpression({ queue, history: output, val});\r\n  }, [queue])\r\n\r\n  const appendQueue = (n: Types) => {\r\n    const newQ = [...queue, n];\r\n    setExpression({ queue: newQ, history, val });\r\n  }\r\n\r\n  const append = (n: Types) => {\r\n    const lastElem = queue.length > 0 ? queue[queue.length - 1] : null;\r\n    if (n.type === \"digit\") {\r\n      if (lastElem !== null && lastElem.type == \"DigitBuilder\") {\r\n        const newQ = [...queue.slice(0, queue.length - 1), lastElem.append(n)];\r\n        setExpression({ queue: newQ, history, val});\r\n      }\r\n      else {\r\n        appendQueue(new DigitBuilder(n));\r\n      }\r\n    }\r\n    else if (n.type === \"operator\" && lastElem && lastElem.type !== \"operator\") {\r\n      appendQueue(n);\r\n    }\r\n    else if (n.type === \"parenthesis\") {\r\n      if (n.display === \")\") {\r\n        setExpression({ queue: addParenthesis([...queue, n]), history, val });\r\n      }\r\n      else {\r\n        appendQueue(n);\r\n      }\r\n    }\r\n    else if (n.type === \"variable\") {\r\n      appendQueue(n);\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setExpression({ queue: [], history: \"\", val: \"\" })\r\n  }\r\n\r\n  const evaluateQueue = () => {\r\n    return calculator(queue);\r\n  }\r\n\r\n  const equals = () => {\r\n    const nextVal = trunc(evaluateQueue());\r\n    setExpression({ queue: addParenthesis([...queue]), history, val: nextVal});\r\n\r\n    setPrev([...prev, {input: history, output: nextVal}]);\r\n  }\r\n  \r\n  const showVar = () => {\r\n    setMode(\"var\");\r\n  }\r\n\r\n  const back = () => {\r\n    setMode(\"num\");\r\n  }\r\n\r\n  return (\r\n    <Body>\r\n      <Main>\r\n      <Variables>\r\n        <NumberDisplay history={history} val={val} prev={prev}/>\r\n          {mode === \"num\" ? \r\n          (<Keypad \r\n              append={(input: Types) => { append(input); }}\r\n              clear={() => { clear(); }}\r\n              equals={() => { equals(); }}\r\n                showVar={() => { showVar(); }}\r\n            />\r\n          ) : (\r\n            <VarPad \r\n              append={(input: Types) => { append(input); }}\r\n              back={() => { back(); }}\r\n              currVal={evaluateQueue()}\r\n              currDisplay={val}\r\n            />\r\n          )}\r\n      </Variables>\r\n      </Main>\r\n    </Body>\r\n  );\r\n}\r\n\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in the Expo client or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}